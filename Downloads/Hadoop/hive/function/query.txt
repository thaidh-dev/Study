create table `_STAGING_HTTP_MDO_TRANS_LOG_END`(
    `Timestamp` bigint,
    transactionStart varchar(101),
    transactionEnd varchar(101),
    osLatency varchar(4001),
    internalLatency varchar(4001),
    ClientIPAddress varchar(4001),
    destinationIpAddress varchar(4001),
    osHttpResponse varchar(4001),
    deviceHttpResponse varchar(4001),
    averageThroughputBytesPerSecond varchar(4001),
    clientRequestHost varchar(4001),
    clientRequestURIPathAndQueryString varchar(65535),
    originContentType varchar(4001),
    responseTime varchar(4001),
    videoPostOptNetworkRespDuration varchar(4001),
    videoWatchedDuration varchar(4001),
    headerBytesToDevice varchar(4001),
    bodyBytesToDevice varchar(4001),
    SubscriberID varchar(4001),
    deviceType varchar(4001),
    cellTowerId varchar(4001),
    serverHostname varchar(4001),
    CL1 varchar(4001),
    LAC string,
    CELL_ID string,
    CELL_ID_4G string,
    CELL_TYPE string
) row format delimited fields terminated by '|' lines terminated by '\n' stored as textfile tblproperties("serialization.null.format"="-");

load data local inpath '/home/hive/http.csv' into table `_STAGING_HTTP_MDO_TRANS_LOG_END`;


 - do hive không hỗ trợ case statement khi create table nên phải load data từ csv file vào trước sau đó insert override vs các tính toán sau

insert overwrite table `_STAGING_HTTP_MDO_TRANS_LOG_END` 
select 
    `Timestamp`,
    transactionStart,
    transactionEnd,
    osLatency,
    internalLatency,
    ClientIPAddress,
    destinationIpAddress,
    osHttpResponse,
    deviceHttpResponse,
    averageThroughputBytesPerSecond,
    clientRequestHost,
    clientRequestURIPathAndQueryString,
    originContentType,
    responseTime,
    videoPostOptNetworkRespDuration,
    videoWatchedDuration,
    headerBytesToDevice,
    bodyBytesToDevice,
    SubscriberID,
    deviceType,
    cellTowerId,
    serverHostname,
    CL1,
    case
        when 
            (locate('SAC', cellTowerId) > 0 OR locate('CI', cellTowerId) > 0) 
            AND (length(cellTowerId) - length(replace(cellTowerId, ':', ''))) = 2
        then
            substring(cellTowerId, locate(':', cellTowerId) + 1, (locate(':', cellTowerId , locate(':', cellTowerId) + 1) - 1) - locate(':', cellTowerId)) 
    end,
    case
        when 
            (locate('SAC', cellTowerId) > 0 OR locate('CI', cellTowerId) > 0) 
            AND (length(cellTowerId) - length(replace(cellTowerId, ':', ''))) = 2
        then
            substring(cellTowerId, locate(':', cellTowerId, locate(':', cellTowerId) + 1) + 1, length(cellTowerId) - locate(':', cellTowerId, locate(':', cellTowerId) + 1))
    end,
    case
        when 
            locate('ECI', cellTowerId) > 0 
            AND locate(':', cellTowerId) > 0
        then
            conv(
                substring(
                    conv(substring(cellTowerId, locate(':', cellTowerId) + 1, length(cellTowerId)), 10, 16), 
                    length(conv(substring(cellTowerId, locate(':', cellTowerId) + 1, length(cellTowerId)), 10, 16)) - 1, 
                    length(conv(substring(cellTowerId, locate(':', cellTowerId) + 1, length(cellTowerId)), 10, 16))
                ),
                16, 
                10
            )
    end,
    case 
        when locate('SAC', cellTowerId) > 0 then '3G' 
        when locate('ECI', cellTowerId) > 0 then '4G' 
        when locate('CI', cellTowerId) > 0 then '2G' 
    end
from `_STAGING_HTTP_MDO_TRANS_LOG_END`;



CREATE TABLE DIM_DATE_TIME(
    DATETIME_ID int, 
    DATETIME_NAME varchar(16),
    DATETIME_ALTERNATE varchar(22), 
    DATETIME_HOUR_OF_DAY varchar(2), 
    DATE_ID int, 
    DATE_NAME varchar(10), 
    DATE_DAY_OF_WEEK_LONG_NAME varchar(9), 
    DATE_DAY_OF_WEEK_SHORT_NAME varchar(3), 
    DATE_DAY_NUM_OF_WEEK int, 
    DATEW_DAY_NUM_OF_WEEK int, 
    DATE_DAY_NUM_OF_MONTH int, 
    DATE_DAY_NUM_OF_YEAR int, 
    WEEK_ID int, 
    WEEK_NAME varchar(46), 
    WEEK_NUM_OF_YEAR int, 
    WEEK_START_DATE varchar(10), 
    WEEK_END_DATE varchar(10), 
    MONTH_ID int, 
    MONTH_NUMBER_OF_DAY int, 
    MONTH_START_DATE varchar(10), 
    MONTH_END_DATE varchar(10), 
    MONTH_SHORT_NAME varchar(3), 
    MONTH_LONG_NAME varchar(9), 
    MONTH_YEAR_SHORT_NAME varchar(8), 
    MONTH_YEAR_LONG_NAME varchar(14), 
    MONTH_NUM_OF_YEAR int, 
    QUARTER_ID varchar(7), 
    QUARTER_START_DATE varchar(10), 
    QUARTER_END_DATE varchar(10), 
    QUARTER_NUM_OF_YEAR int, 
    ISO_YEAR_ID varchar(4), 
    YEAR_ID varchar(4), 
    YEAR_NUMBER_OF_DAY int
) 
ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.OpenCSVSerde'
WITH SERDEPROPERTIES (
   "separatorChar" = ",",
   "quoteChar"     = "\""
) 
STORED AS TEXTFILE tblproperties("skip.header.line.count"="1");


load data local inpath '/home/hive/DIM_DATE_TIME.csv' into table DIM_DATE_TIME;



CREATE TABLE CELL_INFO_CELLS(
    CELL_NODE_ID bigint, 
    LAC varchar(20), 
    CELL_ID varchar(20), 
    CELL_NAME varchar(250), 
    CENTER varchar(10), 
    PROVINCE varchar(255), 
    DISTRICT varchar(255), 
    CELL_TYPE varchar(10), 
    BSC_MCC varchar(250), 
    BSC_MNC varchar(250), 
    BSCID varchar(250), 
    BSCNAME varchar(250), 
    SITEID varchar(250), 
    SITENAME string, 
    VENDOR varchar(250), 
    BRANCH varchar(250), 
    CTKD varchar(50), 
    DATEADDED varchar(22), 
    `ORDER` int, 
    TTML varchar(50), 
    LONG decimal(18, 10), 
    LAT decimal(18, 10), 
    TVT varchar(50), 
    DVT varchar(50), 
    Bandwidth varchar(50), 
    address_detail_english varchar(250), 
    azimuth varchar(50)
) 
ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.OpenCSVSerde'
WITH SERDEPROPERTIES (
   "separatorChar" = ",",
   "quoteChar"     = "\""
) 
STORED AS TEXTFILE tblproperties("skip.header.line.count"="1", "serialization.null.format"="");

load data local inpath '/home/hive/cell_info_cells.csv' into table cell_info_cells;

insert overwrite table cell_info_cells
select 
    CELL_NODE_ID, 
    LAC, 
    CELL_ID, 
    CELL_NAME, 
    CENTER, 
    PROVINCE, 
    DISTRICT, 
    CELL_TYPE, 
    BSC_MCC, 
    BSC_MNC, 
    BSCID, 
    BSCNAME, 
    SITEID, 
    case 
        when CELL_TYPE = '4G' 
        then 
            case 
                when locate('_LTE', CELL_NAME) <= 0 
                then null 
                else 
                    case 
                        when locate('_', reverse(substring(CELL_NAME, 1, locate('_LTE', CELL_NAME) - 1))) <> 2 
                        then substring(CELL_NAME, 1, locate('_LTE', CELL_NAME) - 2) 
                        else substring(CELL_NAME, 1, locate('_LTE', CELL_NAME) - 3) 
                    end 
            end 

        when CELL_TYPE = '3G' OR CELL_TYPE = '2G' 
        then 
            case 
                when locate('_', CELL_NAME) >= 1 
                then substring(CELL_NAME, 1, length(CELL_NAME) - locate('_', reverse(CELL_NAME))) 
                else substring(CELL_NAME, 1, length(CELL_NAME) - 1) 
            end  
    end, 
    VENDOR, 
    BRANCH, 
    CTKD, 
    DATEADDED, 
    case 
        when center = 'Mien Nam' then 4 
        when center = 'Mien Bac' then 2 
        when center = 'Mien Trung' then 3 
    end, 
    TTML, 
    LONG, 
    LAT, 
    TVT, 
    DVT, 
    Bandwidth, 
    address_detail_english, 
    azimuth
from cell_info_cells;


CREATE VIEW vHTTP_MDO_TRANS_LOG_END AS 
SELECT 
    `Timestamp`, 
    `Timestamp`/10000 as DATETIME_ID,
    CASE CLIENTIPADDRESS 
        WHEN '-' THEN NULL ELSE CLIENTIPADDRESS 
    END CLIENTIPADDRESS,
    SubscriberID as MSISDN,
    (
        select max(CELL_NODE_ID) FROM CELL_INFO_CELLS d
        WHERE (
            `_STAGING_HTTP_MDO_TRANS_LOG_END`.CELL_TYPE <> '4G' 
            AND d.CELL_ID = `_STAGING_HTTP_MDO_TRANS_LOG_END`.CELL_ID 
            and d.LAC = `_STAGING_HTTP_MDO_TRANS_LOG_END`.LAC
        )
        OR (
            `_STAGING_HTTP_MDO_TRANS_LOG_END`.CELL_TYPE = '4G' 
            AND d.CELL_ID = `_STAGING_HTTP_MDO_TRANS_LOG_END`.CELL_ID_4G
        )
    ) AS CELL_NODE_ID,
    cast(TRANSACTIONSTART as float) TRANSACTIONSTART,
    cast(TRANSACTIONEND as float) TRANSACTIONEND, 
    cast(OSLATENCY as float) OSLATENCY, 
    cast(INTERNALLATENCY as float) INTERNALLATENCY,
    cast(DESTINATIONIPADDRESS as float) DESTINATIONIPADDRESS,
    cast(OSHTTPRESPONSE as float) OSHTTPRESPONSE,
    cast(DEVICEHTTPRESPONSE as float) DEVICEHTTPRESPONSE,
    cast(AVERAGETHROUGHPUTBYTESPERSECOND as float) AVERAGETHROUGHPUTBYTESPERSECOND,
    CLIENTREQUESTHOST CLIENTREQUESTHOST,
    cast(CLIENTREQUESTURIPATHANDQUERYSTRING as VARCHAR(4000)) CLIENTREQUESTURIPATHANDQUERYSTRING, 
    ORIGINCONTENTTYPE ORIGINCONTENTTYPE,
    cast(RESPONSETIME as float) RESPONSETIME,
    cast(VIDEOPOSTOPTNETWORKRESPDURATION as float) VIDEOPOSTOPTNETWORKRESPDURATION,
    cast(VIDEOWATCHEDDURATION as float) VIDEOWATCHEDDURATION,
    cast(HEADERBYTESTODEVICE as float) HEADERBYTESTODEVICE,
    cast(BODYBYTESTODEVICE as float) BODYBYTESTODEVICE,
    deviceType as deviceType,
    cellTowerId as cellTowerId,
    serverHostname as serverHostname,
    LAC,
    CELL_ID,
    CELL_ID_4G AS CELL_ID_4G
FROM `_STAGING_HTTP_MDO_TRANS_LOG_END`;















