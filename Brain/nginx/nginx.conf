events {}


http {
    # # I get a rather ugly html page, style.css is not applied
    # # because nginx is sending wrong mine type with the css file
    # # run this command: curl -I http://localhost/style.css, will see that content-type is text/plain
    # # css file's content type should be text/css, not text/plain
    # # So to fix this, we need to provide nginx with content types for given file extensions
    # types {
    #     text/html html;
    #     text/css css;
    # }
    # but there's an more easier way nginx allows us to include pieces of configuration from separate files.
    include mime.types; # /etc/nginx/mime.types

    server {
        listen 80;
        server_name localhost;
        root /sites/demo;

        # # LOCATION BLOCKS
        # # prefix match: meaning that it matches a request starting with /greet
        # # so, /greeting is also matched or even another path like /greet/more
        # # anything starting with /greet
        # location /greet {
        #     return 200 'Hello from nginx "/greet" location';
        # }
        # # exact match: not want this behavior, we can also do an exact match by adding the equal sign
        # location = /greet {
        #     return 200 'Hello from nginx "/greet" location';
        # }
        # # regex: /greet is not matched but /greet2 is matched
        # # *: to match case insensitive (viết hoa, viết thường)
        # location ~* /greet[0-9] {
        #     return 200 'Hello from nginx "/greet" location';
        # }
        # # in this case "~* /greet[0-9]" will be prioritized
        # location /Greet2 {
        #     return 200 'Hello from nginx "/Greet2" location';
        # }
        # location ~* /greet[0-9] {
        #     return 200 'Hello from nginx "~* /greet[0-9]" location';
        # }
        # # but if u add ^~, "/Greet2" will be prioritized
        # location ^~ /Greet2 {
        #     return 200 'Hello from nginx "/Greet2" location';
        # }
        # location ~* /greet[0-9] {
        #     return 200 'Hello from nginx "~* /greet[0-9]" location';
        # }

        # # VARIABLES
        # if ($arg_apikey != 1234) {
        #     return 401 'Incorrect API key';
        # }

        # # check if weekend
        # set $weekend 'No';
        # if ($date_local ~ 'Saturday|Sunday') {
        #     set $weekend 'Yes';
        # }
        # location /is_weekend {
        #     return 200 $weekend;
        # }

        # location /inspect {
        #     # http://localhost:8080/inspect?thaidh=thaidh
        #     return 200 "$host\n$uri\n$args\n$arg_thaidh"; 
        # }

        # # REWRITES & REDIRECTS
        # # redirects
        # location /logo {
        #     return 307 /thumb.png;
        # }

        # # rewrites
        # # last: the last flag allows us to do is tell nginx not to allow a url to be rewritten anymore
        # rewrite ^/user/(\w+) /greet/$1 last; 
        # rewrite ^/user/thaidh /thumb.png;

        # location /greet {
        #     return 200 'hello user';
        # }
        # location /greet/thaidh {
        #     return 200 'hello thaidh';
        # }

        # # TRY_FILES: serve for all requests
        # # when we make a request, for example /nothing, nginx will check whether /nothing is present in array of uri /sites/demo/thumb.png /sites/demo/$uri /sites/demo/greet or not,
        # # if it does, redirect to /nothing, if not, very last uri will be rewritten (/friendly_404 will be written)
        # try_files /thumb.png $uri /greet /friendly_404;

        # location /friendly_404 {
        #     return 404 'sorry, that uri could not be found';
        # }

        # location /greet {
        #     return 200 'hello user';
        # }

        # # location can be named with syntax as follows
        # try_files /thumb.png $uri /greet @friendly_error_404;

        # location @friendly_error_404 {
        #     return 404 'sorry, that uri could not be found';
        # }

        # LOGGING
        # nginx default location log 
    }
}