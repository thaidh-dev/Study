- JVM:
	tải code
	kiểm tra code
	thực thi code
- JRE:
	môi trường runtime
	gồm các thư viện
	và các file được sử dụng khi runtime
- JDK:
	bộ công cụ phát triển java
	chứa JRE và JVM


- biến là tên của vùng nhớ để chứa dữ liệu


- phương thức là tập hợp các lệnh được nhóm với nhau để thực hiện 1 hành động


- nạp chồng hàm: 
		phương thức có cùng tên 
		khác nhau về tham số


- truyền tham số vào hàm và hàm đấy có làm thay đổi giá trị của tham số
sau khi thực hiện hàm, giá trị của tham số:
	có thay đổi -> tham biến
	không thay đổi -> tham trị
- khi truyền tham trị trình biên dịch tạo ra 1 bản sao của biến đó và truyền giá trị vào bản sao đó
- biến primitive (nguyên thủy) lưu trữ 1 giá trị
- biến tham chiếu lưu địa chỉ của đối tượng mà nó tham chiếu tới


- Tham số biến đổi là tham số khi truyền vào hàm với số lượng tùy ý (phải cùng kiểu)
Tham số biến đổi phải được định nghĩa sau cùng


- kiểu dữ liệu nguyên thủy: 
	byte, short, int, long , double
	char
	boolean


- lớp là mẫu để mô tả các đối tượng cùng loại
- đối tượng là 1 thực thể có trạng thái và hành vi


- Hàm tạo là một phương thức đặc biệt được sử dụng để tạo đối tượng
	Tên trùng với tên lớp
	Không trả về giá trị 
- Trong một lớp có thể định nghĩa nhiều hàm tạo khác tham số
	Mỗi hàm tạo cung cấp 1 cách tạo đối tượng
	Nếu không khai báo hàm tạo thì Java tự động cung cấp hàm tạo mặc định (không tham số) 


- this 
	được sử dụng trong lớp để tham chiếu tới các thành viên của lớp (field và method)
	gọi hàm tạo của lớp hiện tại
	được sử dụng để đại diện cho đối tượng hiện tại
	

- đặc tả truy xuất (access modifier)
	private: chỉ dùng trong class
	public: đâu cũng dùng được
	default: 
		cùng gói: public
		khác gói: private
	protected:
		cùng package: public
		khác package: private
		B extends A: lớp con có thể dùng được các biến protected của lớp cha


- throws: ném ngoại lệ ra ngoài method
- throw: phát sinh ngoại lệ
- Ngoại lệ ‘unchecked’: Là các ngoại lệ được kiểm tra lúc chạy 
- Ngoại lệ ‘checked’: Là các ngoại lệ được kiểm tra lúc dịch 


- có 2 cách tạo thread: 
	extends Thread
	implements Runable
Cách 1: 
	A a1 = new A();
	a1.start();
	A a2 = new A();
	a2.start();
Cách 2: 
	Thread t1 = new Thread(run);
	t1.start();
	Thread t2 = new Thread(run);
	t2.start();
- khác nhau: 
	cách 1: 1 con không có 2 cha
	cách 2: thì nhiều thread có thể dùng chung run
- thread sử dụng chung tài nguyên gây xung đột
cần phải sắp xếp lại: cái nào vào trước dùng trước, các cái khác phải đợi
- synchronized(this) {}
	đồng bộ block
	this này thể hiện khối mã được đồng bộ trên đối tượng chứa khối đó
- deadlock: 2 thread chờ đợi lẫn nhau
- daemon thread là luồng cung cấp dịch vụ cho các thread khác
Nếu không còn thread người dùng nào hoạt động thì deamon thread sẽ dừng hoạt động
vd: dọn rác, java dọn các biến null và vùng nhớ không còn đc tham chiếu


- hash code: trả về địa chỉ vùng nhớ mà đối tượng đó đang lưu trữ, số nguyên


- generic tạo ra và sử dụng một class, interface, method với nhiều kiểu dữ liệu khác nhau


- lớp abstract:
	giống hệt lớp bình thường, có hành vi chưa xác định rõ, được khai báo bằng abstract
	không thể tạo 1 instance từ lớp abstract
	lớp nào có abstract method thì lớp đó là lớp abstract
Hinh h = new Hinh {
	...
} lớp con vô danh của Hinh


- interface: 
	là 1 bản thiết kế của 1 lớp
	chỉ có abstract method, default method, static method
	không khởi tạo được
	biến của nó: int a = 5; -> static final int a = 5;


- lớp final: lớp khác không được phép kế thừa
- phương thức final: các method không đc phép ghi đè
- biến final: không được phép thay đổi giá trị
- biến final blank: là biến không được khởi tạo giá trị khi khai báo
- Khối static {}: 
	sẽ chạy trước khi tạo đối tượng 
	chỉ chạy một lần đầu tiên duy nhất 


- 4 đặc tính:
	trừu tượng: các đối tượng có hành vi chưa xác định rõ
	
	đa hình: 
		1 hành vi được thể hiện = nhiều cách khác nhau
		vd: tiếng kêu: 
			mèo : meo meo
			chó: gâu gâu
		nạp chồng
		ghi đè
	
	đóng gói: 
		đặc điểm và hành vi của đối tượng được bảo vệ, không cho phép truy cập từ bên ngoài. 
		Việc cho phép bên ngoài tác động đến đối tượng hay không phụ thuộc vào người viết code

	kế thừa: tái sử dụng, lớp con có thể sở hữu trường, phương thức của lớp cha


- Autoboxing: Tự động chuyển đổi các kiểu dữ liệu nguyên thủy thành kiểu đối tượng


- map:
	là tập hợp các cặp key - value
	Sử dụng key để truy xuất giá trị của mỗi phần tử
	hashmap cấp phát vùng nhớ không liên tục
	linkedHashMap cấp phát vùng nhớ liên tục


- mảng:
	là tập hợp các phần tử cùng kiểu
	Mảng có số lượng phần tử cố định
	mảng được cấp phát vùng nhớ liên tục
	Truy xuất các phần tử mảng bằng chỉ số, bắt đầu là 0
	Có thể lưu trữ dữ liệu kiểu nguyên thủy và đối tượng
	mảng thì phải dịch chuyển vị trí các phần tử khi thêm, sửa, xóa


- arrayList:
	Chỉ có thể lưu trữ dữ liệu kiểu đối tượng
	kiểu nguyên thủy được tự động chuyển đổi trong các đối tượng được gọi là auto-boxing
	Kích thước có thể thay đổi được
	chiếm giữ các ô nhớ liên tục
	có thể thêm, sửa, xóa các phần tử
	truy xuất các phần tử bằng chỉ số


- set:
	Chỉ có thể lưu trữ dữ liệu kiểu đối tượng
	kiểu nguyên thủy được tự động chuyển đổi trong các đối tượng được gọi là auto-boxing
	không có phần tử trùng nhau
	không truy xuất theo chỉ số
	có thể thêm, sửa, xóa các phần tử


- linkedList: 
	có cấu trúc theo các node: 1 chứa dữ liệu, 1 chứa liên kết vs node khác
	node này chỉ quan tâm đến node trước và sau mình là cái nào
	chiếm giữ các ô nhớ không liên tục như mảng hay arrayList
	tốn bộ nhớ hơn mảng vì phải chứa thêm liên kết đến node khác
	khi thêm, sửa, xóa chỉ cần sửa liên kết còn mảng thì phải dịch chuyển vị trí các phần tử


- immutable là không thể sửa đổi hoặc không thể thay đổi được. 
Một khi đối tượng String đã được tạo ra, giá trị của nó không thể thay đổi
