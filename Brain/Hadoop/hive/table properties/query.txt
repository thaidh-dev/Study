create table table2 (col1 string, col2 int) row format delimited fields terminated by ',' lines terminated by '\n' stored as textfile tblproperties("skip.footer.line.count"="3");

create table table2 (col1 string, col2 int) row format delimited fields terminated by ',' lines terminated by '\n' stored as textfile tblproperties("immutable"="true");
    table bất biến, không được insert, nhưng mà insert overwrite thì lại đc

truncate table table4;
    the data inside the table will be lost, but the structure or the metadata of table 4 is still present

create table table2 (col1 string, col2 int) row format delimited fields terminated by ',' lines terminated by '\n' stored as textfile tblproperties("auto.purge"="true");
    in normal environment, when purge is not set to true, in that case, when dropping an internal table, the data first goes to trash directory, and if the drop was mistakenly done, Hadoop admins can recover that data from trash, but the metadata in this case will be permanently gone.
    And in our second case, like in this case, if purge is set to true and then we are dropping a table, the data will not go to trash directory, it is completely gone along with the metadata. The same logic holds for the truncate command also, that the data will be completely gone when purge is specified, but since it is a truncate command, metadata will be present for that table


create table table2 (col1 string, col2 string, col3 int) row format delimited fields terminated by ',' lines terminated by '\n' stored as textfile tblproperties("serialization.null.format"="");
    default empty value -> empty value
    serialization.null.format empty value -> null



    