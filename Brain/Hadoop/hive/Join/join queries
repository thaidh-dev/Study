create table if not exists emp_tab (col1 int,col2 string,col3 string,col4 int,col5 int,col6 int,col7 string) row format delimited fields terminated by',' lines terminated by'\n'stored as textfile;

create table if not exists dept_tab (col1 int,col2 string,col3 string,col4 string) row format delimited fields terminated by',' lines terminated by'\n'stored as textfile;

create table third_tab(col1 int, conl2 string) row format delimited fields terminated by ',' lines terminated by '\n' stored as textfile;

    Join 2 tables
select emp_tab.col1, emp_tab.col2, emp_tab.col3, dept_tab.col1, dept_tab.col2, dept_tab.col3 
from emp_tab 
join dept_tab on emp_tab.col6 = dept_tab.col1;

    Join 3 tables
select emp_tab.col1, emp_tab.col2, dept_tab.col2, dept_tab.col3, third_tab.col2 
from emp_tab 
join dept_tab on emp_tab.col7 = dept_tab.col4 
join third_tab on dept_tab.col1 = third_tab.col1;
    2 jobs were there. So in first job, employee table is buffered and department will be streamed. Then in the second job, the result of first job will be buffered and third table will be streamed.

select emp_tab.col1, emp_tab.col2, dept_tab.col2, dept_tab.col3, third_tab.col2 
from emp_tab 
join dept_tab on ( emp_tab.col6 = dept_tab.col1 ) 
join third_tab on (dept_tab.col1 = third_tab.col1);
    employee table and department table will be buffered in memory, while the last table in query i.e. the third table, will be streamed through the reducers

select /*+ STREAMTABLE (emp_tab) */ emp_tab.col1, emp_tab.col2, dept_tab.col2, dept_tab.col3, third_tab.col2 
from emp_tab 
join dept_tab on ( emp_tab.col6 = dept_tab.col1 ) 
join third_tab on (dept_tab.col1 = third_tab.col1);
    Now considering this rule that states, that "by default, last table of join is streamed", it is advisory that out of the two tables, whichever table is large, large as in which is big enough as compared to our buffer memory, keep that table at last in the joining query. In this way, we will be saving a lot of our memory. But in case if you find it difficult to put large table at last, or putting large table in last does not serve your purpose, then in that case you have to overwrite this rule by explicitly telling Hive that this table should be streamed. We can do this by specifying stream table keyword in query


select /*+ MAPJOIN(emp_tab) */ emp_tab.col1, emp_tab.col2, dept_tab.col2, dept_tab.col3, third_tab.col2 
from emp_tab 
join dept_tab on (emp_tab.col6 = dept_tab.col1) 
join third_tab on (dept_tab.col1 = third_tab.col1);
    the join completed in a map and a reduce step. in any MapReduce job, the reduce step is considered to be the slowest as it includes shuffling off data from various mappers to a reducer over the network. If this is the case, then why don't we perform a join in mapper side only. If our data is small enough to fit inside a mapper's memory (nằm gọn trong bộ nhớ của mapper), then there is no need to go to a reducer step. The join can be performed on mapper side itself

set hive.auto.convert.join=true;



